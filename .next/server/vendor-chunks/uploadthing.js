"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uploadthing";
exports.ids = ["vendor-chunks/uploadthing"];
exports.modules = {

/***/ "(ssr)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFullApiUrl: () => (/* binding */ getFullApiUrl)\n/* harmony export */ });\n// src/internal/get-full-api-url.ts\nfunction getFullApiUrl(maybeUrl) {\n    const base = (()=>{\n        var _a, _b;\n        if (false) {}\n        if (typeof process !== \"undefined\" && ((_a = process == null ? void 0 : process.env) == null ? void 0 : _a.VERCEL_URL)) {\n            return `https://${process.env.VERCEL_URL}`;\n        }\n        if ((_b = /* unsupported import.meta.env */ undefined) == null ? void 0 : _b.VERCEL_URL) {\n            return `https://${/* unsupported import.meta.env.VERCEL_URL */ undefined.VERCEL_URL}`;\n        }\n        return \"http://localhost:3000\";\n    })();\n    try {\n        const url = new URL(maybeUrl ?? \"/api/uploadthing\", base);\n        if (url.pathname === \"/\") {\n            url.pathname = \"/api/uploadthing\";\n        }\n        return url;\n    } catch (err) {\n        throw new Error(`Failed to parse '${maybeUrl}' as a URL. Make sure it's a valid URL or path`);\n    }\n}\n //# sourceMappingURL=chunk-4PDGVH57.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay00UERHVkg1Ny5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLG1DQUFtQztBQUNuQyxTQUFTQSxjQUFjQyxRQUFRO0lBQzdCLE1BQU1DLE9BQU8sQ0FBQztRQUNaLElBQUlDLElBQUlDO1FBQ1IsSUFBSSxLQUE2QixFQUFFLEVBRWxDO1FBQ0QsSUFBSSxPQUFPSSxZQUFZLGVBQWdCLEVBQUNMLEtBQUtLLFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVFDLEdBQUcsS0FBSyxPQUFPLEtBQUssSUFBSU4sR0FBR08sVUFBVSxHQUFHO1lBQ3RILE9BQU8sQ0FBQyxRQUFRLEVBQUVGLFFBQVFDLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDLENBQUM7UUFDNUM7UUFDQSxJQUFJLENBQUNOLEtBQUssMkNBQWUsS0FBSyxPQUFPLEtBQUssSUFBSUEsR0FBR00sVUFBVSxFQUFFO1lBQzNELE9BQU8sQ0FBQyxRQUFRLEVBQUUsaUVBQTBCLENBQUMsQ0FBQztRQUNoRDtRQUNBLE9BQU87SUFDVDtJQUNBLElBQUk7UUFDRixNQUFNQyxNQUFNLElBQUlDLElBQUlYLFlBQVksb0JBQW9CQztRQUNwRCxJQUFJUyxJQUFJRSxRQUFRLEtBQUssS0FBSztZQUN4QkYsSUFBSUUsUUFBUSxHQUFHO1FBQ2pCO1FBQ0EsT0FBT0Y7SUFDVCxFQUFFLE9BQU9HLEtBQUs7UUFDWixNQUFNLElBQUlDLE1BQ1IsQ0FBQyxpQkFBaUIsRUFBRWQsU0FBUyw4Q0FBOEMsQ0FBQztJQUVoRjtBQUNGO0FBSUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0amFwcm9qZXh0Ly4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvY2h1bmstNFBER1ZINTcubWpzPzI0ZGEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2ludGVybmFsL2dldC1mdWxsLWFwaS11cmwudHNcbmZ1bmN0aW9uIGdldEZ1bGxBcGlVcmwobWF5YmVVcmwpIHtcbiAgY29uc3QgYmFzZSA9ICgoKSA9PiB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoKF9hID0gcHJvY2VzcyA9PSBudWxsID8gdm9pZCAwIDogcHJvY2Vzcy5lbnYpID09IG51bGwgPyB2b2lkIDAgOiBfYS5WRVJDRUxfVVJMKSkge1xuICAgICAgcmV0dXJuIGBodHRwczovLyR7cHJvY2Vzcy5lbnYuVkVSQ0VMX1VSTH1gO1xuICAgIH1cbiAgICBpZiAoKF9iID0gaW1wb3J0Lm1ldGEuZW52KSA9PSBudWxsID8gdm9pZCAwIDogX2IuVkVSQ0VMX1VSTCkge1xuICAgICAgcmV0dXJuIGBodHRwczovLyR7aW1wb3J0Lm1ldGEuZW52LlZFUkNFTF9VUkx9YDtcbiAgICB9XG4gICAgcmV0dXJuIFwiaHR0cDovL2xvY2FsaG9zdDozMDAwXCI7XG4gIH0pKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChtYXliZVVybCA/PyBcIi9hcGkvdXBsb2FkdGhpbmdcIiwgYmFzZSk7XG4gICAgaWYgKHVybC5wYXRobmFtZSA9PT0gXCIvXCIpIHtcbiAgICAgIHVybC5wYXRobmFtZSA9IFwiL2FwaS91cGxvYWR0aGluZ1wiO1xuICAgIH1cbiAgICByZXR1cm4gdXJsO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgRmFpbGVkIHRvIHBhcnNlICcke21heWJlVXJsfScgYXMgYSBVUkwuIE1ha2Ugc3VyZSBpdCdzIGEgdmFsaWQgVVJMIG9yIHBhdGhgXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQge1xuICBnZXRGdWxsQXBpVXJsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstNFBER1ZINTcubWpzLm1hcCJdLCJuYW1lcyI6WyJnZXRGdWxsQXBpVXJsIiwibWF5YmVVcmwiLCJiYXNlIiwiX2EiLCJfYiIsIndpbmRvdyIsImxvY2F0aW9uIiwib3JpZ2luIiwicHJvY2VzcyIsImVudiIsIlZFUkNFTF9VUkwiLCJ1cmwiLCJVUkwiLCJwYXRobmFtZSIsImVyciIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeParseResponseXML: () => (/* binding */ maybeParseResponseXML),\n/* harmony export */   uploadPart: () => (/* binding */ uploadPart),\n/* harmony export */   uploadPartWithProgress: () => (/* binding */ uploadPartWithProgress)\n/* harmony export */ });\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n// src/internal/multi-part.ts\n\n// src/internal/s3-error-parser.ts\nvar maybeParseResponseXML = (maybeXml)=>{\n    const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n    const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n    const code = codeMatch == null ? void 0 : codeMatch[1];\n    const message = messageMatch == null ? void 0 : messageMatch[1];\n    if (!code || !message) return null;\n    return {\n        code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE,\n        message\n    };\n};\nvar DEFAULT_ERROR_CODE = \"UPLOAD_FAILED\";\nvar s3CodeToUploadThingCode = {\n    AccessDenied: \"FORBIDDEN\",\n    // 403 Forbidden\n    EntityTooSmall: \"TOO_SMALL\",\n    // 400 Bad Request\n    EntityTooLarge: \"TOO_LARGE\",\n    // 400 Bad Request\n    ExpiredToken: \"FORBIDDEN\",\n    // 400 Bad Request\n    IncorrectNumberOfFilesInPostRequest: \"TOO_MANY_FILES\",\n    // 400 Bad Request\n    InternalError: \"INTERNAL_SERVER_ERROR\",\n    // 500 Internal Server Error\n    KeyTooLongError: \"KEY_TOO_LONG\",\n    // 400 Bad Request\n    MaxMessageLengthExceeded: \"TOO_LARGE\"\n};\n// src/internal/multi-part.ts\nasync function uploadPart(opts, retryCount = 0) {\n    const s3Res = await opts.fetch(opts.url, {\n        method: \"PUT\",\n        body: opts.chunk,\n        headers: {\n            \"Content-Type\": opts.contentType,\n            \"Content-Disposition\": [\n                opts.contentDisposition,\n                `filename=\"${encodeURI(opts.fileName)}\"`,\n                `filename*=UTF-8''${encodeURI(opts.fileName)}`\n            ].join(\"; \")\n        }\n    });\n    if (s3Res.ok) {\n        const etag = s3Res.headers.get(\"Etag\");\n        if (!etag) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: \"Missing Etag header from uploaded part\"\n            });\n        }\n        return etag.replace(/\"/g, \"\");\n    }\n    if (retryCount < opts.maxRetries) {\n        const delay = 2 ** retryCount * 1e3;\n        await new Promise((r)=>setTimeout(r, delay));\n        return uploadPart(opts, retryCount++);\n    }\n    await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/failureCallback\"), {\n        method: \"POST\",\n        body: JSON.stringify({\n            fileKey: opts.key\n        }),\n        headers: opts.utRequestHeaders\n    });\n    const text = await s3Res.text();\n    const parsed = maybeParseResponseXML(text);\n    if (parsed == null ? void 0 : parsed.message) {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: parsed.message\n        });\n    }\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"Failed to upload file to storage provider\",\n        cause: s3Res\n    });\n}\nasync function uploadPartWithProgress(opts, retryCount = 0) {\n    return new Promise((resolve, reject)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", opts.url, true);\n        xhr.setRequestHeader(\"Content-Type\", opts.fileType);\n        xhr.setRequestHeader(\"Content-Disposition\", [\n            opts.contentDisposition,\n            `filename=\"${encodeURI(opts.fileName)}\"`,\n            `filename*=UTF-8''${encodeURI(opts.fileName)}`\n        ].join(\"; \"));\n        xhr.onload = async ()=>{\n            if (xhr.status >= 200 && xhr.status < 300) {\n                const etag = xhr.getResponseHeader(\"Etag\");\n                etag ? resolve(etag) : reject(\"NO ETAG\");\n            } else if (retryCount < opts.maxRetries) {\n                const delay = Math.pow(2, retryCount) * 1e3;\n                await new Promise((res)=>setTimeout(res, delay));\n                await uploadPartWithProgress(opts, retryCount + 1);\n            } else {\n                reject(\"Max retries exceeded\");\n            }\n        };\n        let lastProgress = 0;\n        xhr.onerror = async ()=>{\n            lastProgress = 0;\n            if (retryCount < opts.maxRetries) {\n                const delay = Math.pow(2, retryCount) * 100;\n                await new Promise((res)=>setTimeout(res, delay));\n                await uploadPartWithProgress(opts, retryCount + 1);\n            } else {\n                reject(\"Max retries exceeded\");\n            }\n        };\n        xhr.upload.onprogress = (e)=>{\n            const delta = e.loaded - lastProgress;\n            lastProgress += delta;\n            opts.onProgress(delta);\n        };\n        xhr.send(opts.chunk);\n    });\n}\n //# sourceMappingURL=chunk-S3R3VXRK.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/client.mjs":
/*!**************************************************!*\
  !*** ./node_modules/uploadthing/dist/client.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DANGEROUS__uploadFiles: () => (/* binding */ DANGEROUS__uploadFiles),\n/* harmony export */   INTERNAL_DO_NOT_USE__fatalClientError: () => (/* binding */ INTERNAL_DO_NOT_USE__fatalClientError),\n/* harmony export */   INTERNAL_doFormatting: () => (/* binding */ INTERNAL_doFormatting),\n/* harmony export */   allowedContentTextLabelGenerator: () => (/* binding */ allowedContentTextLabelGenerator),\n/* harmony export */   capitalizeStart: () => (/* binding */ capitalizeStart),\n/* harmony export */   classNames: () => (/* binding */ classNames),\n/* harmony export */   contentFieldToContent: () => (/* binding */ contentFieldToContent),\n/* harmony export */   genUploader: () => (/* binding */ genUploader),\n/* harmony export */   generateClientDropzoneAccept: () => (/* binding */ generateClientDropzoneAccept),\n/* harmony export */   generateMimeTypes: () => (/* binding */ generateMimeTypes),\n/* harmony export */   generatePermittedFileTypes: () => (/* binding */ generatePermittedFileTypes),\n/* harmony export */   getFullApiUrl: () => (/* reexport safe */ _chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_1__.getFullApiUrl),\n/* harmony export */   styleFieldToClassName: () => (/* binding */ styleFieldToClassName),\n/* harmony export */   styleFieldToCssObject: () => (/* binding */ styleFieldToCssObject)\n/* harmony export */ });\n/* harmony import */ var _chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-S3R3VXRK.mjs */ \"(ssr)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs\");\n/* harmony import */ var _chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-4PDGVH57.mjs */ \"(ssr)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n\n// src/client.ts\n\n// src/internal/ut-reporter.ts\n\nvar createAPIRequestUrl = (config)=>{\n    const url = new URL(config.url);\n    const queryParams = new URLSearchParams(url.search);\n    queryParams.set(\"actionType\", config.actionType);\n    queryParams.set(\"slug\", config.slug);\n    url.search = queryParams.toString();\n    return url;\n};\nvar createUTReporter = (cfg)=>{\n    return async (type, payload)=>{\n        const url = createAPIRequestUrl({\n            url: cfg.url,\n            slug: cfg.endpoint,\n            actionType: type\n        });\n        const response = await fetch(url, {\n            method: \"POST\",\n            body: JSON.stringify(payload),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        switch(type){\n            case \"failure\":\n                {\n                    const p = payload;\n                    const parsed = (0,_chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__.maybeParseResponseXML)(p.s3Error ?? \"\");\n                    if (parsed == null ? void 0 : parsed.message) {\n                        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                            code: parsed.code,\n                            message: parsed.message\n                        });\n                    } else {\n                        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                            code: \"UPLOAD_FAILED\",\n                            message: `Failed to upload file ${p.fileName} to S3`,\n                            cause: p.s3Error\n                        });\n                    }\n                }\n        }\n        return response.ok;\n    };\n};\n// src/internal/component-theming.ts\n\nvar generatePermittedFileTypes = (config)=>{\n    const fileTypes = config ? (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.objectKeys)(config) : [];\n    const maxFileCount = config ? Object.values(config).map((v)=>v.maxFileCount) : [];\n    return {\n        fileTypes,\n        multiple: maxFileCount.some((v)=>v && v > 1)\n    };\n};\nvar capitalizeStart = (str)=>{\n    return str.charAt(0).toUpperCase() + str.slice(1);\n};\nvar INTERNAL_doFormatting = (config)=>{\n    if (!config) return \"\";\n    const allowedTypes = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.objectKeys)(config);\n    const formattedTypes = allowedTypes.map((f)=>f === \"blob\" ? \"file\" : f);\n    if (formattedTypes.length > 1) {\n        const lastType = formattedTypes.pop();\n        return `${formattedTypes.join(\"s, \")} and ${lastType}s`;\n    }\n    const key = allowedTypes[0];\n    const formattedKey = formattedTypes[0];\n    const { maxFileSize, maxFileCount } = config[key];\n    if (maxFileCount && maxFileCount > 1) {\n        return `${formattedKey}s up to ${maxFileSize}, max ${maxFileCount}`;\n    } else {\n        return `${formattedKey} (${maxFileSize})`;\n    }\n};\nvar allowedContentTextLabelGenerator = (config)=>{\n    return capitalizeStart(INTERNAL_doFormatting(config));\n};\nvar styleFieldToClassName = (styleField, args)=>{\n    if (typeof styleField === \"string\") return styleField;\n    if (typeof styleField === \"function\") {\n        const result = styleField(args);\n        if (typeof result === \"string\") return result;\n    }\n    return \"\";\n};\nvar styleFieldToCssObject = (styleField, args)=>{\n    if (typeof styleField === \"object\") return styleField;\n    if (typeof styleField === \"function\") {\n        const result = styleField(args);\n        if (typeof result === \"object\") return result;\n    }\n    return {};\n};\nvar contentFieldToContent = (contentField, arg)=>{\n    if (!contentField) return null;\n    if (typeof contentField !== \"function\") return contentField;\n    if (typeof contentField === \"function\") {\n        const result = contentField(arg);\n        return result;\n    }\n};\n// src/client.ts\nvar INTERNAL_DO_NOT_USE__fatalClientError = (e)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n        code: \"INTERNAL_CLIENT_ERROR\",\n        message: \"Something went wrong. Please report this to UploadThing.\",\n        cause: e\n    });\nvar DANGEROUS__uploadFiles = async (endpoint, opts)=>{\n    const reportEventToUT = createUTReporter({\n        endpoint: String(endpoint),\n        url: opts.url\n    });\n    const s3ConnectionRes = await fetch(createAPIRequestUrl({\n        url: opts.url,\n        slug: String(endpoint),\n        actionType: \"upload\"\n    }), {\n        method: \"POST\",\n        body: JSON.stringify({\n            input: \"input\" in opts ? opts.input : null,\n            files: opts.files.map((f)=>({\n                    name: f.name,\n                    size: f.size\n                }))\n        }),\n        // Express requires Content-Type to be explicitly set to parse body properly\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }).then(async (res)=>{\n        if (!res.ok) {\n            const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError.fromResponse(res);\n            throw error;\n        }\n        const jsonOrError = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.safeParseJSON)(res);\n        if (jsonOrError instanceof Error) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: jsonOrError.message,\n                cause: res\n            });\n        }\n        return jsonOrError;\n    });\n    if (!s3ConnectionRes || !Array.isArray(s3ConnectionRes)) {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"No URL. How did you even get here?\",\n            cause: s3ConnectionRes\n        });\n    }\n    const fileUploadPromises = s3ConnectionRes.map(async (presigned)=>{\n        var _a;\n        const file = opts.files.find((f)=>f.name === presigned.fileName);\n        if (!file) {\n            console.error(\"No file found for presigned URL\", presigned);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                code: \"NOT_FOUND\",\n                message: \"No file found for presigned URL\",\n                cause: `Expected file with name ${presigned.fileName} but got '${opts.files.join(\",\")}'`\n            });\n        }\n        const { presignedUrls, uploadId, chunkSize, contentDisposition, key, pollingUrl, pollingJwt } = presigned;\n        let uploadedBytes = 0;\n        let etags;\n        (_a = opts.onUploadBegin) == null ? void 0 : _a.call(opts, {\n            file: file.name\n        });\n        try {\n            etags = await Promise.all(presignedUrls.map(async (url, index)=>{\n                const offset = chunkSize * index;\n                const end = Math.min(offset + chunkSize, file.size);\n                const chunk = file.slice(offset, end);\n                const etag = await (0,_chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__.uploadPartWithProgress)({\n                    url,\n                    chunk,\n                    contentDisposition,\n                    fileType: file.type,\n                    fileName: file.name,\n                    maxRetries: 10,\n                    onProgress: (delta)=>{\n                        var _a2;\n                        uploadedBytes += delta;\n                        const percent = uploadedBytes / file.size * 100;\n                        (_a2 = opts.onUploadProgress) == null ? void 0 : _a2.call(opts, {\n                            file: file.name,\n                            progress: percent\n                        });\n                    }\n                });\n                return {\n                    tag: etag,\n                    partNumber: index + 1\n                };\n            }));\n        } catch (error) {\n            await reportEventToUT(\"failure\", {\n                fileKey: key,\n                uploadId,\n                fileName: file.name,\n                s3Error: error.toString()\n            });\n            throw \"unreachable\";\n        }\n        const uploadOk = await reportEventToUT(\"multipart-complete\", {\n            uploadId,\n            fileKey: key,\n            etags\n        });\n        if (!uploadOk) {\n            console.log(\"Failed to alert UT of upload completion\");\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: \"Failed to alert UT of upload completion\"\n            });\n        }\n        await new Promise((r)=>setTimeout(r, 750));\n        const serverData = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_2__.withExponentialBackoff)(async ()=>{\n            const res = await fetch(pollingUrl, {\n                headers: {\n                    authorization: pollingJwt\n                }\n            }).then((r)=>r.json());\n            return res.status === \"done\" ? res.callbackData : void 0;\n        });\n        return {\n            name: file.name,\n            size: file.size,\n            key: presigned.key,\n            serverData,\n            url: \"https://utfs.io/f/\" + key\n        };\n    });\n    return Promise.all(fileUploadPromises);\n};\nvar genUploader = (initOpts)=>{\n    const url = (initOpts == null ? void 0 : initOpts.url) instanceof URL ? initOpts.url : (0,_chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_1__.getFullApiUrl)(initOpts == null ? void 0 : initOpts.url);\n    return (endpoint, opts)=>// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        DANGEROUS__uploadFiles(endpoint, {\n            ...opts,\n            url\n        });\n};\nvar classNames = (...classes)=>{\n    return classes.filter(Boolean).join(\" \");\n};\nvar generateMimeTypes = (fileTypes)=>{\n    const accepted = fileTypes.map((type)=>{\n        if (type === \"blob\") return \"blob\";\n        if (type === \"pdf\") return \"application/pdf\";\n        if (type.includes(\"/\")) return type;\n        else return `${type}/*`;\n    });\n    if (accepted.includes(\"blob\")) {\n        return void 0;\n    }\n    return accepted;\n};\nvar generateClientDropzoneAccept = (fileTypes)=>{\n    const mimeTypes = generateMimeTypes(fileTypes);\n    if (!mimeTypes) return void 0;\n    return Object.fromEntries(mimeTypes.map((type)=>[\n            type,\n            []\n        ]));\n};\n //# sourceMappingURL=client.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/client.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getFullApiUrl: () => (/* binding */ getFullApiUrl)\n/* harmony export */ });\n// src/internal/get-full-api-url.ts\nfunction getFullApiUrl(maybeUrl) {\n    const base = (()=>{\n        var _a, _b;\n        if (false) {}\n        if (typeof process !== \"undefined\" && ((_a = process == null ? void 0 : process.env) == null ? void 0 : _a.VERCEL_URL)) {\n            return `https://${process.env.VERCEL_URL}`;\n        }\n        if ((_b = /* unsupported import.meta.env */ undefined) == null ? void 0 : _b.VERCEL_URL) {\n            return `https://${/* unsupported import.meta.env.VERCEL_URL */ undefined.VERCEL_URL}`;\n        }\n        return \"http://localhost:3000\";\n    })();\n    try {\n        const url = new URL(maybeUrl ?? \"/api/uploadthing\", base);\n        if (url.pathname === \"/\") {\n            url.pathname = \"/api/uploadthing\";\n        }\n        return url;\n    } catch (err) {\n        throw new Error(`Failed to parse '${maybeUrl}' as a URL. Make sure it's a valid URL or path`);\n    }\n}\n //# sourceMappingURL=chunk-4PDGVH57.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay00UERHVkg1Ny5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLG1DQUFtQztBQUNuQyxTQUFTQSxjQUFjQyxRQUFRO0lBQzdCLE1BQU1DLE9BQU8sQ0FBQztRQUNaLElBQUlDLElBQUlDO1FBQ1IsSUFBSSxLQUE2QixFQUFFLEVBRWxDO1FBQ0QsSUFBSSxPQUFPSSxZQUFZLGVBQWdCLEVBQUNMLEtBQUtLLFdBQVcsT0FBTyxLQUFLLElBQUlBLFFBQVFDLEdBQUcsS0FBSyxPQUFPLEtBQUssSUFBSU4sR0FBR08sVUFBVSxHQUFHO1lBQ3RILE9BQU8sQ0FBQyxRQUFRLEVBQUVGLFFBQVFDLEdBQUcsQ0FBQ0MsVUFBVSxDQUFDLENBQUM7UUFDNUM7UUFDQSxJQUFJLENBQUNOLEtBQUssMkNBQWUsS0FBSyxPQUFPLEtBQUssSUFBSUEsR0FBR00sVUFBVSxFQUFFO1lBQzNELE9BQU8sQ0FBQyxRQUFRLEVBQUUsaUVBQTBCLENBQUMsQ0FBQztRQUNoRDtRQUNBLE9BQU87SUFDVDtJQUNBLElBQUk7UUFDRixNQUFNQyxNQUFNLElBQUlDLElBQUlYLFlBQVksb0JBQW9CQztRQUNwRCxJQUFJUyxJQUFJRSxRQUFRLEtBQUssS0FBSztZQUN4QkYsSUFBSUUsUUFBUSxHQUFHO1FBQ2pCO1FBQ0EsT0FBT0Y7SUFDVCxFQUFFLE9BQU9HLEtBQUs7UUFDWixNQUFNLElBQUlDLE1BQ1IsQ0FBQyxpQkFBaUIsRUFBRWQsU0FBUyw4Q0FBOEMsQ0FBQztJQUVoRjtBQUNGO0FBSUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0amFwcm9qZXh0Ly4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvY2h1bmstNFBER1ZINTcubWpzPzI0ZGEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2ludGVybmFsL2dldC1mdWxsLWFwaS11cmwudHNcbmZ1bmN0aW9uIGdldEZ1bGxBcGlVcmwobWF5YmVVcmwpIHtcbiAgY29uc3QgYmFzZSA9ICgoKSA9PiB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJiAoKF9hID0gcHJvY2VzcyA9PSBudWxsID8gdm9pZCAwIDogcHJvY2Vzcy5lbnYpID09IG51bGwgPyB2b2lkIDAgOiBfYS5WRVJDRUxfVVJMKSkge1xuICAgICAgcmV0dXJuIGBodHRwczovLyR7cHJvY2Vzcy5lbnYuVkVSQ0VMX1VSTH1gO1xuICAgIH1cbiAgICBpZiAoKF9iID0gaW1wb3J0Lm1ldGEuZW52KSA9PSBudWxsID8gdm9pZCAwIDogX2IuVkVSQ0VMX1VSTCkge1xuICAgICAgcmV0dXJuIGBodHRwczovLyR7aW1wb3J0Lm1ldGEuZW52LlZFUkNFTF9VUkx9YDtcbiAgICB9XG4gICAgcmV0dXJuIFwiaHR0cDovL2xvY2FsaG9zdDozMDAwXCI7XG4gIH0pKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChtYXliZVVybCA/PyBcIi9hcGkvdXBsb2FkdGhpbmdcIiwgYmFzZSk7XG4gICAgaWYgKHVybC5wYXRobmFtZSA9PT0gXCIvXCIpIHtcbiAgICAgIHVybC5wYXRobmFtZSA9IFwiL2FwaS91cGxvYWR0aGluZ1wiO1xuICAgIH1cbiAgICByZXR1cm4gdXJsO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgRmFpbGVkIHRvIHBhcnNlICcke21heWJlVXJsfScgYXMgYSBVUkwuIE1ha2Ugc3VyZSBpdCdzIGEgdmFsaWQgVVJMIG9yIHBhdGhgXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQge1xuICBnZXRGdWxsQXBpVXJsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstNFBER1ZINTcubWpzLm1hcCJdLCJuYW1lcyI6WyJnZXRGdWxsQXBpVXJsIiwibWF5YmVVcmwiLCJiYXNlIiwiX2EiLCJfYiIsIndpbmRvdyIsImxvY2F0aW9uIiwib3JpZ2luIiwicHJvY2VzcyIsImVudiIsIlZFUkNFTF9VUkwiLCJ1cmwiLCJVUkwiLCJwYXRobmFtZSIsImVyciIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-Q54J3NSA.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-Q54J3NSA.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UTApi: () => (/* binding */ UTApi),\n/* harmony export */   createServerHandler: () => (/* binding */ createServerHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing),\n/* harmony export */   extractRouterConfig: () => (/* binding */ extractRouterConfig)\n/* harmony export */ });\n/* harmony import */ var _chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-S3R3VXRK.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs\");\n/* harmony import */ var _chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-WPSY3MFJ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\");\n/* harmony import */ var _chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-SHB3FCAQ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-SHB3FCAQ.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n\n\n// src/server.ts\n\n// src/sdk/index.ts\n\n// src/sdk/utils.ts\n\nfunction guardServerOnly() {\n    if (false) {}\n}\nfunction getApiKeyOrThrow(apiKey) {\n    if (apiKey) return apiKey;\n    if (process.env.UPLOADTHING_SECRET) return process.env.UPLOADTHING_SECRET;\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n        code: \"MISSING_ENV\",\n        message: \"Missing `UPLOADTHING_SECRET` env variable.\"\n    });\n}\nvar uploadFilesInternal = async (data, opts)=>{\n    const fileData = data.files.map((file)=>({\n            name: file.name ?? \"unnamed-blob\",\n            type: file.type,\n            size: file.size\n        }));\n    const res = await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(\"/api/uploadFiles\"), {\n        method: \"POST\",\n        headers: opts.utRequestHeaders,\n        cache: \"no-store\",\n        body: JSON.stringify({\n            files: fileData,\n            metadata: data.metadata,\n            contentDisposition: data.contentDisposition\n        })\n    });\n    if (!res.ok) {\n        const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.fromResponse(res);\n        throw error;\n    }\n    const clonedRes = res.clone();\n    const json = await res.json();\n    if (\"error\" in json) {\n        const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.fromResponse(clonedRes);\n        throw error;\n    }\n    const uploads = await Promise.allSettled(data.files.map(async (file, i)=>{\n        const { presignedUrls, key, fileUrl, uploadId, chunkSize } = json.data[i];\n        if (!presignedUrls || !Array.isArray(presignedUrls)) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                code: \"URL_GENERATION_FAILED\",\n                message: \"Failed to generate presigned URL\",\n                cause: JSON.stringify(json.data[i])\n            });\n        }\n        const etags = await Promise.all(presignedUrls.map(async (url, index)=>{\n            const offset = chunkSize * index;\n            const end = Math.min(offset + chunkSize, file.size);\n            const chunk = file.slice(offset, end);\n            const etag = await (0,_chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_0__.uploadPart)({\n                fetch: opts.fetch,\n                url,\n                chunk,\n                contentDisposition: data.contentDisposition,\n                contentType: file.type,\n                fileName: file.name,\n                maxRetries: 10,\n                key,\n                utRequestHeaders: opts.utRequestHeaders\n            });\n            return {\n                tag: etag,\n                partNumber: index + 1\n            };\n        }));\n        await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(\"/api/completeMultipart\"), {\n            method: \"POST\",\n            body: JSON.stringify({\n                fileKey: key,\n                uploadId,\n                etags\n            }),\n            headers: opts.utRequestHeaders\n        });\n        await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.pollForFileData)({\n            url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(`/api/pollUpload/${key}`),\n            apiKey: opts.utRequestHeaders[\"x-uploadthing-api-key\"],\n            sdkVersion: _chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n        });\n        return {\n            key,\n            url: fileUrl,\n            name: file.name,\n            size: file.size\n        };\n    }));\n    return uploads.map((upload)=>{\n        if (upload.status === \"fulfilled\") {\n            const data2 = upload.value;\n            return {\n                data: data2,\n                error: null\n            };\n        }\n        const reason = upload.reason;\n        const error = _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.toObject(reason);\n        return {\n            data: null,\n            error\n        };\n    });\n};\n// src/sdk/index.ts\nvar UTApi = class {\n    constructor(opts){\n        this.fetch = (opts == null ? void 0 : opts.fetch) ?? globalThis.fetch;\n        this.apiKey = (opts == null ? void 0 : opts.apiKey) ?? process.env.UPLOADTHING_SECRET;\n        this.defaultHeaders = {\n            \"Content-Type\": \"application/json\",\n            \"x-uploadthing-api-key\": this.apiKey,\n            \"x-uploadthing-version\": _chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n        };\n        guardServerOnly();\n        getApiKeyOrThrow(this.apiKey);\n        (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n    }\n    async requestUploadThing(pathname, body, fallbackErrorMessage) {\n        const res = await this.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(pathname), {\n            method: \"POST\",\n            cache: \"no-store\",\n            headers: this.defaultHeaders,\n            body: JSON.stringify(body)\n        });\n        const json = await res.json();\n        if (!res.ok || \"error\" in json) {\n            console.error(\"[UT] Error:\", json);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"error\" in json && typeof json.error === \"string\" ? json.error : fallbackErrorMessage\n            });\n        }\n        return json;\n    }\n    /**\n   * @param {FileEsque | FileEsque[]} files The file(s) to upload\n   * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n   *\n   * @example\n   * await uploadFiles(new File([\"foo\"], \"foo.txt\"));\n   *\n   * @example\n   * await uploadFiles([\n   *   new File([\"foo\"], \"foo.txt\"),\n   *   new File([\"bar\"], \"bar.txt\"),\n   * ]);\n   */ async uploadFiles(files, opts) {\n        guardServerOnly();\n        const filesToUpload = Array.isArray(files) ? files : [\n            files\n        ];\n        const uploads = await uploadFilesInternal({\n            files: filesToUpload,\n            metadata: (opts == null ? void 0 : opts.metadata) ?? {},\n            contentDisposition: (opts == null ? void 0 : opts.contentDisposition) ?? \"inline\"\n        }, {\n            fetch: this.fetch,\n            utRequestHeaders: this.defaultHeaders\n        });\n        const uploadFileResponse = Array.isArray(files) ? uploads : uploads[0];\n        return uploadFileResponse;\n    }\n    /**\n   * @param {string} url The URL of the file to upload\n   * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n   *\n   * @example\n   * await uploadFileFromUrl(\"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await uploadFileFromUrl([\n   *   \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n   *   \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"\n   * ])\n   */ async uploadFilesFromUrl(urls, opts) {\n        guardServerOnly();\n        const fileUrls = Array.isArray(urls) ? urls : [\n            urls\n        ];\n        const formData = new FormData();\n        formData.append(\"metadata\", JSON.stringify((opts == null ? void 0 : opts.metadata) ?? {}));\n        const filesToUpload = await Promise.all(fileUrls.map(async (url)=>{\n            if (typeof url === \"string\") url = new URL(url);\n            const filename = url.pathname.split(\"/\").pop() ?? \"unknown-filename\";\n            const fileResponse = await fetch(url);\n            if (!fileResponse.ok) {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Failed to download requested file.\",\n                    cause: fileResponse\n                });\n            }\n            const blob = await fileResponse.blob();\n            return Object.assign(blob, {\n                name: filename\n            });\n        }));\n        const uploads = await uploadFilesInternal({\n            files: filesToUpload,\n            metadata: (opts == null ? void 0 : opts.metadata) ?? {},\n            contentDisposition: (opts == null ? void 0 : opts.contentDisposition) ?? \"inline\"\n        }, {\n            fetch: this.fetch,\n            utRequestHeaders: this.defaultHeaders\n        });\n        const uploadFileResponse = Array.isArray(urls) ? uploads : uploads[0];\n        return uploadFileResponse;\n    }\n    /**\n   * Request to delete files from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * await deleteFiles(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await deleteFiles([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   */ async deleteFiles(fileKeys) {\n        guardServerOnly();\n        if (!Array.isArray(fileKeys)) fileKeys = [\n            fileKeys\n        ];\n        return this.requestUploadThing(\"/api/deleteFile\", {\n            fileKeys\n        }, \"An unknown error occured while deleting files.\");\n    }\n    /**\n   * Request file URLs from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * const data = await getFileUrls(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   * console.log(data); // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\"}]\n   *\n   * @example\n   * const data = await getFileUrls([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   * console.log(data) // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\" },{key: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\", url: \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"}]\n   */ async getFileUrls(fileKeys) {\n        guardServerOnly();\n        if (!Array.isArray(fileKeys)) fileKeys = [\n            fileKeys\n        ];\n        const json = await this.requestUploadThing(\"/api/getFileUrl\", {\n            fileKeys\n        }, \"An unknown error occured while retrieving file URLs.\");\n        return json.data;\n    }\n    /**\n   * Request file list from UploadThing storage.\n   * @param {object} opts\n   * @param {number} opts.limit The maximum number of files to return\n   * @param {number} opts.offset The number of files to skip\n   *\n   * @example\n   * const data = await listFiles({ limit: 1 });\n   * console.log(data); // { key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", id: \"2e0fdb64-9957-4262-8e45-f372ba903ac8\" }\n   */ async listFiles(opts) {\n        guardServerOnly();\n        const json = await this.requestUploadThing(\"/api/listFiles\", opts, \"An unknown error occured while listing files.\");\n        return json.files;\n    }\n    async renameFile(updates) {\n        guardServerOnly();\n        if (!Array.isArray(updates)) updates = [\n            updates\n        ];\n        return this.requestUploadThing(\"/api/renameFile\", {\n            updates\n        }, \"An unknown error occured while renaming files.\");\n    }\n    async getUsageInfo() {\n        guardServerOnly();\n        return this.requestUploadThing(\"/api/getUsageInfo\", {}, \"An unknown error occured while getting usage info.\");\n    }\n};\n// src/server.ts\nvar createUploadthing = (opts)=>(0,_chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.createBuilder)(opts);\nvar createServerHandler = (opts)=>{\n    (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n    const requestHandler = (0,_chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.buildRequestHandler)(opts);\n    const POST = async (request)=>{\n        const req = request instanceof Request ? request : request.request;\n        const response = await requestHandler({\n            req\n        });\n        if (response instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError) {\n            return new Response(JSON.stringify((0,_chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.formatError)(response, opts.router)), {\n                status: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.getStatusCodeFromError)(response),\n                headers: {\n                    \"x-uploadthing-version\": _chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n                }\n            });\n        }\n        if (response.status !== 200) {\n            return new Response(\"An unknown error occured\", {\n                status: 500,\n                headers: {\n                    \"x-uploadthing-version\": _chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n                }\n            });\n        }\n        return new Response(JSON.stringify(response.body), {\n            status: response.status,\n            headers: {\n                \"x-uploadthing-version\": _chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n            }\n        });\n    };\n    const getBuildPerms = (0,_chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.buildPermissionsInfoHandler)(opts);\n    const GET = (request)=>{\n        const _req = request instanceof Request ? request : request.request;\n        return new Response(JSON.stringify(getBuildPerms()), {\n            status: 200,\n            headers: {\n                \"x-uploadthing-version\": _chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n            }\n        });\n    };\n    return {\n        GET,\n        POST\n    };\n};\nvar extractRouterConfig = (router)=>(0,_chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_2__.buildPermissionsInfoHandler)({\n        router\n    })();\n //# sourceMappingURL=chunk-Q54J3NSA.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-Q54J3NSA.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeParseResponseXML: () => (/* binding */ maybeParseResponseXML),\n/* harmony export */   uploadPart: () => (/* binding */ uploadPart),\n/* harmony export */   uploadPartWithProgress: () => (/* binding */ uploadPartWithProgress)\n/* harmony export */ });\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n// src/internal/multi-part.ts\n\n// src/internal/s3-error-parser.ts\nvar maybeParseResponseXML = (maybeXml)=>{\n    const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n    const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n    const code = codeMatch == null ? void 0 : codeMatch[1];\n    const message = messageMatch == null ? void 0 : messageMatch[1];\n    if (!code || !message) return null;\n    return {\n        code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE,\n        message\n    };\n};\nvar DEFAULT_ERROR_CODE = \"UPLOAD_FAILED\";\nvar s3CodeToUploadThingCode = {\n    AccessDenied: \"FORBIDDEN\",\n    // 403 Forbidden\n    EntityTooSmall: \"TOO_SMALL\",\n    // 400 Bad Request\n    EntityTooLarge: \"TOO_LARGE\",\n    // 400 Bad Request\n    ExpiredToken: \"FORBIDDEN\",\n    // 400 Bad Request\n    IncorrectNumberOfFilesInPostRequest: \"TOO_MANY_FILES\",\n    // 400 Bad Request\n    InternalError: \"INTERNAL_SERVER_ERROR\",\n    // 500 Internal Server Error\n    KeyTooLongError: \"KEY_TOO_LONG\",\n    // 400 Bad Request\n    MaxMessageLengthExceeded: \"TOO_LARGE\"\n};\n// src/internal/multi-part.ts\nasync function uploadPart(opts, retryCount = 0) {\n    const s3Res = await opts.fetch(opts.url, {\n        method: \"PUT\",\n        body: opts.chunk,\n        headers: {\n            \"Content-Type\": opts.contentType,\n            \"Content-Disposition\": [\n                opts.contentDisposition,\n                `filename=\"${encodeURI(opts.fileName)}\"`,\n                `filename*=UTF-8''${encodeURI(opts.fileName)}`\n            ].join(\"; \")\n        }\n    });\n    if (s3Res.ok) {\n        const etag = s3Res.headers.get(\"Etag\");\n        if (!etag) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: \"Missing Etag header from uploaded part\"\n            });\n        }\n        return etag.replace(/\"/g, \"\");\n    }\n    if (retryCount < opts.maxRetries) {\n        const delay = 2 ** retryCount * 1e3;\n        await new Promise((r)=>setTimeout(r, delay));\n        return uploadPart(opts, retryCount++);\n    }\n    await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/failureCallback\"), {\n        method: \"POST\",\n        body: JSON.stringify({\n            fileKey: opts.key\n        }),\n        headers: opts.utRequestHeaders\n    });\n    const text = await s3Res.text();\n    const parsed = maybeParseResponseXML(text);\n    if (parsed == null ? void 0 : parsed.message) {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: parsed.message\n        });\n    }\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"Failed to upload file to storage provider\",\n        cause: s3Res\n    });\n}\nasync function uploadPartWithProgress(opts, retryCount = 0) {\n    return new Promise((resolve, reject)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", opts.url, true);\n        xhr.setRequestHeader(\"Content-Type\", opts.fileType);\n        xhr.setRequestHeader(\"Content-Disposition\", [\n            opts.contentDisposition,\n            `filename=\"${encodeURI(opts.fileName)}\"`,\n            `filename*=UTF-8''${encodeURI(opts.fileName)}`\n        ].join(\"; \"));\n        xhr.onload = async ()=>{\n            if (xhr.status >= 200 && xhr.status < 300) {\n                const etag = xhr.getResponseHeader(\"Etag\");\n                etag ? resolve(etag) : reject(\"NO ETAG\");\n            } else if (retryCount < opts.maxRetries) {\n                const delay = Math.pow(2, retryCount) * 1e3;\n                await new Promise((res)=>setTimeout(res, delay));\n                await uploadPartWithProgress(opts, retryCount + 1);\n            } else {\n                reject(\"Max retries exceeded\");\n            }\n        };\n        let lastProgress = 0;\n        xhr.onerror = async ()=>{\n            lastProgress = 0;\n            if (retryCount < opts.maxRetries) {\n                const delay = Math.pow(2, retryCount) * 100;\n                await new Promise((res)=>setTimeout(res, delay));\n                await uploadPartWithProgress(opts, retryCount + 1);\n            } else {\n                reject(\"Max retries exceeded\");\n            }\n        };\n        xhr.upload.onprogress = (e)=>{\n            const delta = e.loaded - lastProgress;\n            lastProgress += delta;\n            opts.onProgress(delta);\n        };\n        xhr.send(opts.chunk);\n    });\n}\n //# sourceMappingURL=chunk-S3R3VXRK.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-SHB3FCAQ.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-SHB3FCAQ.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UPLOADTHING_VERSION: () => (/* binding */ UPLOADTHING_VERSION),\n/* harmony export */   VALID_ACTION_TYPES: () => (/* binding */ VALID_ACTION_TYPES),\n/* harmony export */   buildPermissionsInfoHandler: () => (/* binding */ buildPermissionsInfoHandler),\n/* harmony export */   buildRequestHandler: () => (/* binding */ buildRequestHandler),\n/* harmony export */   createBuilder: () => (/* binding */ createBuilder),\n/* harmony export */   defaultErrorFormatter: () => (/* binding */ defaultErrorFormatter),\n/* harmony export */   formatError: () => (/* binding */ formatError),\n/* harmony export */   unsetMarker: () => (/* binding */ unsetMarker)\n/* harmony export */ });\n/* harmony import */ var _chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-4PDGVH57.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n// package.json\nvar package_default = {\n    name: \"uploadthing\",\n    version: \"6.1.0\",\n    engines: {\n        node: \">=18.13.0\"\n    },\n    license: \"MIT\",\n    exports: {\n        \"./package.json\": \"./package.json\",\n        \"./client\": {\n            types: \"./dist/client.d.ts\",\n            import: \"./dist/client.mjs\",\n            require: \"./dist/client.js\"\n        },\n        \"./server\": {\n            types: \"./dist/server.d.ts\",\n            import: \"./dist/server.mjs\",\n            require: \"./dist/server.js\"\n        },\n        \"./next\": {\n            types: \"./dist/next.d.ts\",\n            import: \"./dist/next.mjs\",\n            require: \"./dist/next.js\"\n        },\n        \"./next-legacy\": {\n            types: \"./dist/next-legacy.d.ts\",\n            import: \"./dist/next-legacy.mjs\",\n            require: \"./dist/next-legacy.js\"\n        },\n        \"./express\": {\n            import: \"./dist/express.mjs\",\n            types: \"./dist/express.d.ts\",\n            require: \"./dist/express.js\"\n        },\n        \"./tw\": {\n            types: \"./dist/tw.d.ts\",\n            import: \"./dist/tw.mjs\",\n            require: \"./dist/tw.js\"\n        },\n        \"./fastify\": {\n            types: \"./dist/fastify.d.ts\",\n            import: \"./dist/fastify.mjs\",\n            require: \"./dist/fastify.js\"\n        },\n        \"./h3\": {\n            types: \"./dist/h3.d.ts\",\n            import: \"./dist/h3.mjs\",\n            require: \"./dist/h3.js\"\n        }\n    },\n    files: [\n        \"dist\"\n    ],\n    publishConfig: {\n        access: \"public\"\n    },\n    typesVersions: {\n        \"*\": {\n            client: [\n                \"dist/client.d.ts\"\n            ],\n            server: [\n                \"dist/server.d.ts\"\n            ],\n            next: [\n                \"dist/next.d.ts\"\n            ],\n            \"next-legacy\": [\n                \"dist/next-legacy.d.ts\"\n            ],\n            tw: [\n                \"dist/tw.d.ts\"\n            ],\n            express: [\n                \"dist/express.d.ts\"\n            ],\n            fastify: [\n                \"dist/fastify.d.ts\"\n            ],\n            h3: [\n                \"dist/h3.d.ts\"\n            ]\n        }\n    },\n    scripts: {\n        lint: 'eslint \"**/*.{ts,tsx}\" --max-warnings 0',\n        build: \"tsup\",\n        clean: \"git clean -xdf dist node_modules\",\n        dev: \"tsup --watch\",\n        test: \"vitest run\",\n        \"test:watch\": \"vitest\",\n        typecheck: \"tsc --noEmit\"\n    },\n    dependencies: {\n        \"@uploadthing/mime-types\": \"^0.2.2\",\n        \"@uploadthing/shared\": \"^6.0.2\"\n    },\n    devDependencies: {\n        \"@types/express\": \"^4.17.17\",\n        \"@types/react\": \"18.2.33\",\n        \"@uploadthing/eslint-config\": \"0.2.0\",\n        \"@uploadthing/tsconfig\": \"0.1.0\",\n        \"@uploadthing/tsup-config\": \"0.1.0\",\n        eslint: \"^8.47.0\",\n        express: \"^4.18.2\",\n        fastify: \"^4.23.2\",\n        h3: \"^1.8.1\",\n        next: \"14.0.1\",\n        \"solid-js\": \"^1.7.11\",\n        tailwindcss: \"^3.3.2\",\n        tsup: \"6.7.0\",\n        \"type-fest\": \"^3.11.1\",\n        typescript: \"^5.1.6\",\n        undici: \"^5.20.0\",\n        vitest: \"^0.30.1\",\n        zod: \"^3.22.3\"\n    },\n    eslintConfig: {\n        root: true,\n        extends: [\n            \"@uploadthing/eslint-config/base\"\n        ]\n    }\n};\n// src/constants.ts\nif (!package_default.version) throw new Error(\"no version found in package.json\");\nvar UPLOADTHING_VERSION = package_default.version;\n// src/internal/error-formatter.ts\nfunction defaultErrorFormatter(error) {\n    return {\n        message: error.message\n    };\n}\nfunction formatError(error, router) {\n    var _a;\n    const errorFormatter = ((_a = router[Object.keys(router)[0]]) == null ? void 0 : _a._def.errorFormatter) ?? defaultErrorFormatter;\n    return errorFormatter(error);\n}\n// src/internal/types.ts\nvar unsetMarker = \"unsetMarker\";\nvar VALID_ACTION_TYPES = [\n    \"upload\",\n    \"failure\",\n    \"multipart-complete\"\n];\n// src/internal/handler.ts\n\n// src/internal/dev-hook.ts\n\nvar isValidResponse = (response)=>{\n    if (!response.ok) return false;\n    if (response.status >= 400) return false;\n    if (!response.headers.has(\"x-uploadthing-version\")) return false;\n    return true;\n};\nvar conditionalDevServer = async (opts)=>{\n    if (false) {}\n    const fileData = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.pollForFileData)({\n        url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.generateUploadThingURL)(`/api/pollUpload/${opts.fileKey}`),\n        apiKey: opts.apiKey,\n        sdkVersion: UPLOADTHING_VERSION\n    }, async (json)=>{\n        const file = json.fileData;\n        let callbackUrl = file.callbackUrl + `?slug=${file.callbackSlug}`;\n        if (!callbackUrl.startsWith(\"http\")) callbackUrl = \"http://\" + callbackUrl;\n        console.log(\"[UT] SIMULATING FILE UPLOAD WEBHOOK CALLBACK\", callbackUrl);\n        const response = await fetch(callbackUrl, {\n            method: \"POST\",\n            body: JSON.stringify({\n                status: \"uploaded\",\n                metadata: JSON.parse(file.metadata ?? \"{}\"),\n                file: {\n                    url: `https://utfs.io/f/${encodeURIComponent(opts.fileKey)}`,\n                    key: opts.fileKey,\n                    name: file.fileName,\n                    size: file.fileSize\n                }\n            }),\n            headers: {\n                \"uploadthing-hook\": \"callback\"\n            }\n        });\n        if (isValidResponse(response)) {\n            console.log(\"[UT] Successfully simulated callback for file\", opts.fileKey);\n        } else {\n            console.error(\"[UT] Failed to simulate callback for file. Is your webhook configured correctly?\", opts.fileKey);\n        }\n        return file;\n    });\n    if (fileData !== void 0) return fileData;\n    console.error(`[UT] Failed to simulate callback for file ${opts.fileKey}`);\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"File took too long to upload\"\n    });\n};\n// src/internal/parser.ts\nfunction getParseFn(parser) {\n    if (typeof parser.parse === \"function\") {\n        return parser.parse;\n    }\n    throw new Error(\"Invalid parser\");\n}\n// src/internal/handler.ts\nvar createUTFetch = (apiKey)=>{\n    return async (endpoint, payload)=>{\n        const response = await fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.generateUploadThingURL)(endpoint), {\n            method: \"POST\",\n            body: JSON.stringify(payload),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-uploadthing-api-key\": apiKey,\n                \"x-uploadthing-version\": UPLOADTHING_VERSION\n            }\n        });\n        return response;\n    };\n};\nvar fileCountLimitHit = (files, routeConfig)=>{\n    var _a;\n    const counts = {};\n    files.forEach((file)=>{\n        const type = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.getTypeFromFileName)(file.name, (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.objectKeys)(routeConfig));\n        if (!counts[type]) {\n            counts[type] = 1;\n        } else {\n            counts[type] += 1;\n        }\n    });\n    for(const _key in counts){\n        const key = _key;\n        const count = counts[key];\n        const limit = (_a = routeConfig[key]) == null ? void 0 : _a.maxFileCount;\n        if (!limit) {\n            console.error(routeConfig, key);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Invalid config during file count\",\n                cause: `Expected route config to have a maxFileCount for key ${key} but none was found.`\n            });\n        }\n        if (count > limit) {\n            return {\n                limitHit: true,\n                type: key,\n                limit,\n                count\n            };\n        }\n    }\n    return {\n        limitHit: false\n    };\n};\nvar getHeader = (req, key)=>{\n    if (req.headers instanceof Headers) {\n        return req.headers.get(key);\n    }\n    return req.headers[key];\n};\nvar buildRequestHandler = (opts)=>{\n    return async (input)=>{\n        var _a;\n        if (true) {\n            console.log(\"[UT] UploadThing dev server is now running!\");\n        }\n        const { req, res, event } = input;\n        const { router, config } = opts;\n        const preferredOrEnvSecret = (config == null ? void 0 : config.uploadthingSecret) ?? process.env.UPLOADTHING_SECRET;\n        let url;\n        try {\n            url = new URL(input.url ?? req.url ?? \"\");\n        } catch (error) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: `Invalid url '${((_a = input.url) == null ? void 0 : _a.href) ?? req.url}'`,\n                cause: error\n            });\n        }\n        const params = url.searchParams;\n        const uploadthingHook = getHeader(req, \"uploadthing-hook\") ?? void 0;\n        const slug = params.get(\"slug\") ?? void 0;\n        const actionType = params.get(\"actionType\") ?? void 0;\n        if (!slug) return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"No slug provided\"\n        });\n        if (slug && typeof slug !== \"string\") {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`slug` must be a string\",\n                cause: `Expected slug to be of type 'string', got '${typeof slug}'`\n            });\n        }\n        if (actionType && typeof actionType !== \"string\") {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`actionType` must be a string\",\n                cause: `Expected actionType to be of type 'string', got '${typeof actionType}'`\n            });\n        }\n        if (uploadthingHook && typeof uploadthingHook !== \"string\") {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`uploadthingHook` must be a string\",\n                cause: `Expected uploadthingHook to be of type 'string', got '${typeof uploadthingHook}'`\n            });\n        }\n        if (!preferredOrEnvSecret) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: `Please set your preferred secret in ${slug} router's config or set UPLOADTHING_SECRET in your env file`,\n                cause: \"No secret provided\"\n            });\n        }\n        const uploadable = router[slug];\n        if (!uploadable) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"NOT_FOUND\",\n                message: `No file route found for slug ${slug}`\n            });\n        }\n        const utFetch = createUTFetch(preferredOrEnvSecret);\n        if (uploadthingHook === \"callback\") {\n            const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n            if (maybeReqBody instanceof Error) {\n                return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Invalid request body\",\n                    cause: maybeReqBody\n                });\n            }\n            const res2 = await uploadable.resolver({\n                file: maybeReqBody.file,\n                metadata: maybeReqBody.metadata\n            });\n            await utFetch(\"/api/serverCallback\", {\n                fileKey: maybeReqBody.file.key,\n                callbackData: res2 ?? null\n            });\n            return {\n                status: 200\n            };\n        }\n        if (!actionType || !VALID_ACTION_TYPES.includes(actionType)) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                cause: `Invalid action type ${actionType}`,\n                message: `Expected ${VALID_ACTION_TYPES.map((x)=>`\"${x}\"`).join(\", \").replace(/,(?!.*,)/, \" or\")} but got \"${\"a\"}\"`\n            });\n        }\n        switch(actionType){\n            case \"upload\":\n                {\n                    const maybeInput = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n                    if (maybeInput instanceof Error) {\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid request body\",\n                            cause: maybeInput\n                        });\n                    }\n                    const { files, input: userInput } = maybeInput;\n                    let parsedInput = {};\n                    try {\n                        const inputParser = uploadable._def.inputParser;\n                        parsedInput = await getParseFn(inputParser)(userInput);\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid input.\",\n                            cause: error\n                        });\n                    }\n                    let metadata = {};\n                    try {\n                        metadata = await uploadable._def.middleware({\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            req,\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            res,\n                            event,\n                            input: parsedInput\n                        });\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"INTERNAL_SERVER_ERROR\",\n                            message: \"Failed to run middleware.\",\n                            cause: error\n                        });\n                    }\n                    if (!Array.isArray(files) || !files.every((f)=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.isObject)(f) && typeof f.name === \"string\" && typeof f.size === \"number\")) return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                        code: \"BAD_REQUEST\",\n                        message: \"Files must be an array of objects with name and size\",\n                        cause: `Expected files to be of type '{name:string, size:number}[]', got '${JSON.stringify(files)}'`\n                    });\n                    let parsedConfig;\n                    try {\n                        parsedConfig = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.fillInputRouteConfig)(uploadable._def.routerConfig);\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid config.\",\n                            cause: error\n                        });\n                    }\n                    try {\n                        const { limitHit, count, limit, type } = fileCountLimitHit(files, parsedConfig);\n                        if (limitHit) {\n                            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                                code: \"BAD_REQUEST\",\n                                message: \"File limit exceeded\",\n                                cause: `You uploaded ${count} files of type '${type}', but the limit for that type is ${limit}`\n                            });\n                        }\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid config.\",\n                            cause: error\n                        });\n                    }\n                    const callbackUrl = resolveCallbackUrl({\n                        config,\n                        req,\n                        url\n                    });\n                    const uploadthingApiResponse = await utFetch(\"/api/prepareUpload\", {\n                        files,\n                        routeConfig: parsedConfig,\n                        metadata,\n                        callbackUrl: callbackUrl.origin + callbackUrl.pathname,\n                        callbackSlug: slug\n                    });\n                    const parsedResponse = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(uploadthingApiResponse);\n                    if (!uploadthingApiResponse.ok || parsedResponse instanceof Error) {\n                        console.error(\"[UT] unable to get presigned urls\");\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"URL_GENERATION_FAILED\",\n                            message: \"Unable to get presigned urls\",\n                            cause: parsedResponse\n                        });\n                    }\n                    if (true) {\n                        for (const file of parsedResponse){\n                            void conditionalDevServer({\n                                fileKey: file.key,\n                                apiKey: preferredOrEnvSecret\n                            });\n                        }\n                    }\n                    return {\n                        body: parsedResponse.map((x)=>({\n                                ...x,\n                                pollingUrl: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.generateUploadThingURL)(`/api/serverCallback`)\n                            })),\n                        status: 200\n                    };\n                }\n            case \"multipart-complete\":\n                {\n                    const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n                    if (maybeReqBody instanceof Error) {\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid request body\",\n                            cause: maybeReqBody\n                        });\n                    }\n                    const completeRes = await utFetch(\"/api/completeMultipart\", {\n                        fileKey: maybeReqBody.fileKey,\n                        uploadId: maybeReqBody.uploadId,\n                        etags: maybeReqBody.etags\n                    });\n                    if (!completeRes.ok) {\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"UPLOAD_FAILED\",\n                            message: \"Failed to complete multipart upload\"\n                        });\n                    }\n                    return {\n                        status: 200\n                    };\n                }\n            case \"failure\":\n                {\n                    const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(req);\n                    if (maybeReqBody instanceof Error) {\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid request body\",\n                            cause: maybeReqBody\n                        });\n                    }\n                    const { fileKey, uploadId } = maybeReqBody;\n                    const uploadthingApiResponse = await utFetch(\"/api/failureCallback\", {\n                        fileKey,\n                        uploadId\n                    });\n                    if (!uploadthingApiResponse.ok) {\n                        console.error(\"[UT] failed to mark upload as failed\");\n                        const parsedResponse = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(uploadthingApiResponse);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"INTERNAL_SERVER_ERROR\",\n                            message: \"Unable to mark upload as failed\",\n                            cause: parsedResponse\n                        });\n                    }\n                    try {\n                        uploadable._def.onUploadError({\n                            error: new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                                code: \"UPLOAD_FAILED\",\n                                message: `Upload failed for ${fileKey}`\n                            }),\n                            fileKey\n                        });\n                    } catch (error) {\n                        console.error(\"[UT] Failed to run onUploadError callback. You probably shouldn't be throwing errors in your callback.\");\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"INTERNAL_SERVER_ERROR\",\n                            message: \"Failed to run onUploadError callback\",\n                            cause: error\n                        });\n                    }\n                    return {\n                        status: 200\n                    };\n                }\n            default:\n                {\n                    return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                        code: \"BAD_REQUEST\",\n                        message: `Invalid action type`\n                    });\n                }\n        }\n    };\n};\nfunction resolveCallbackUrl(opts) {\n    var _a, _b;\n    let callbackUrl = opts.url;\n    if ((_a = opts.config) == null ? void 0 : _a.callbackUrl) {\n        callbackUrl = (0,_chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_0__.getFullApiUrl)(opts.config.callbackUrl);\n    } else if (process.env.UPLOADTHING_URL) {\n        callbackUrl = (0,_chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_0__.getFullApiUrl)(process.env.UPLOADTHING_URL);\n    }\n    if (true) {\n        return callbackUrl;\n    }\n    let parsedFromHeaders = (_b = getHeader(opts.req, \"origin\") ?? getHeader(opts.req, \"referer\") ?? getHeader(opts.req, \"host\") ?? getHeader(opts.req, \"x-forwarded-host\")) == null ? void 0 : _b.toString();\n    if (parsedFromHeaders && !parsedFromHeaders.includes(\"http\")) {\n        parsedFromHeaders = (getHeader(opts.req, \"x-forwarded-proto\") ?? \"https\").toString() + \"://\" + parsedFromHeaders;\n    }\n    if (!parsedFromHeaders || parsedFromHeaders.includes(\"localhost\")) {\n        console.warn([\n            \"[UT] [WARN] You are using a localhost callback url in production which is not supported.\",\n            \"Read more and learn how to fix it here: https://uploadthing.com/faq#my-callback-runs-in-development-but-not-in-production\"\n        ].join(\" \"));\n        return callbackUrl;\n    }\n    return (0,_chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_0__.getFullApiUrl)(parsedFromHeaders);\n}\nvar buildPermissionsInfoHandler = (opts)=>{\n    return ()=>{\n        const r = opts.router;\n        const permissions = Object.keys(r).map((k)=>{\n            const route = r[k];\n            const config = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.fillInputRouteConfig)(route._def.routerConfig);\n            return {\n                slug: k,\n                config\n            };\n        });\n        return permissions;\n    };\n};\n// src/internal/upload-builder.ts\nfunction internalCreateBuilder(initDef = {}) {\n    const _def = {\n        // Default router config\n        routerConfig: {\n            image: {\n                maxFileSize: \"4MB\"\n            }\n        },\n        inputParser: {\n            parse: ()=>({}),\n            _input: {},\n            _output: {}\n        },\n        middleware: ()=>({}),\n        onUploadError: ()=>({}),\n        errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,\n        // Overload with properties passed in\n        ...initDef\n    };\n    return {\n        input (userParser) {\n            return internalCreateBuilder({\n                ..._def,\n                inputParser: userParser\n            });\n        },\n        middleware (userMiddleware) {\n            return internalCreateBuilder({\n                ..._def,\n                middleware: userMiddleware\n            });\n        },\n        onUploadComplete (userUploadComplete) {\n            return {\n                _def,\n                resolver: userUploadComplete\n            };\n        },\n        onUploadError (userOnUploadError) {\n            return internalCreateBuilder({\n                ..._def,\n                onUploadError: userOnUploadError\n            });\n        }\n    };\n}\nfunction createBuilder(opts) {\n    return (input)=>{\n        return internalCreateBuilder({\n            routerConfig: input,\n            ...opts\n        });\n    };\n}\n //# sourceMappingURL=chunk-SHB3FCAQ.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-SHB3FCAQ.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   incompatibleNodeGuard: () => (/* binding */ incompatibleNodeGuard)\n/* harmony export */ });\n// src/internal/incompat-node-guard.ts\nfunction incompatibleNodeGuard() {\n    var _a, _b, _c, _d;\n    if (typeof process === \"undefined\") return;\n    let major;\n    let minor;\n    const maybeNodeVersion = (_b = (_a = process.versions) == null ? void 0 : _a.node) == null ? void 0 : _b.split(\".\");\n    if (maybeNodeVersion) {\n        [major, minor] = maybeNodeVersion.map((v)=>parseInt(v, 10));\n    }\n    const maybeNodePath = (_c = process.env) == null ? void 0 : _c.NODE;\n    if (!major && maybeNodePath) {\n        const nodeVersion = (_d = /v(\\d+)\\.(\\d+)\\.(\\d+)/.exec(maybeNodePath)) == null ? void 0 : _d[0];\n        if (nodeVersion) {\n            [major, minor] = nodeVersion.substring(1).split(\".\").map((v)=>parseInt(v, 10));\n        }\n    }\n    if (!major || !minor) return;\n    if (major > 18) return;\n    if (major === 18 && minor >= 13) return;\n    console.error(`[UT]: YOU ARE USING A LEGACY (${major}.${minor}) NODE VERSION WHICH ISN'T OFFICIALLY SUPPORTED. PLEASE UPGRADE TO NODE ^18.13.`);\n    process.exit(1);\n}\n //# sourceMappingURL=chunk-WPSY3MFJ.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1XUFNZM01GSi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHNDQUFzQztBQUN0QyxTQUFTQTtJQUNQLElBQUlDLElBQUlDLElBQUlDLElBQUlDO0lBQ2hCLElBQUksT0FBT0MsWUFBWSxhQUNyQjtJQUNGLElBQUlDO0lBQ0osSUFBSUM7SUFDSixNQUFNQyxtQkFBbUIsQ0FBQ04sS0FBSyxDQUFDRCxLQUFLSSxRQUFRSSxRQUFRLEtBQUssT0FBTyxLQUFLLElBQUlSLEdBQUdTLElBQUksS0FBSyxPQUFPLEtBQUssSUFBSVIsR0FBR1MsS0FBSyxDQUFDO0lBQy9HLElBQUlILGtCQUFrQjtRQUNwQixDQUFDRixPQUFPQyxNQUFNLEdBQUdDLGlCQUFpQkksR0FBRyxDQUFDLENBQUNDLElBQU1DLFNBQVNELEdBQUc7SUFDM0Q7SUFDQSxNQUFNRSxnQkFBZ0IsQ0FBQ1osS0FBS0UsUUFBUVcsR0FBRyxLQUFLLE9BQU8sS0FBSyxJQUFJYixHQUFHYyxJQUFJO0lBQ25FLElBQUksQ0FBQ1gsU0FBU1MsZUFBZTtRQUMzQixNQUFNRyxjQUFjLENBQUNkLEtBQUssdUJBQXVCZSxJQUFJLENBQUNKLGNBQWEsS0FBTSxPQUFPLEtBQUssSUFBSVgsRUFBRSxDQUFDLEVBQUU7UUFDOUYsSUFBSWMsYUFBYTtZQUNmLENBQUNaLE9BQU9DLE1BQU0sR0FBR1csWUFBWUUsU0FBUyxDQUFDLEdBQUdULEtBQUssQ0FBQyxLQUFLQyxHQUFHLENBQUMsQ0FBQ0MsSUFBTUMsU0FBU0QsR0FBRztRQUM5RTtJQUNGO0lBQ0EsSUFBSSxDQUFDUCxTQUFTLENBQUNDLE9BQ2I7SUFDRixJQUFJRCxRQUFRLElBQ1Y7SUFDRixJQUFJQSxVQUFVLE1BQU1DLFNBQVMsSUFDM0I7SUFDRmMsUUFBUUMsS0FBSyxDQUNYLENBQUMsOEJBQThCLEVBQUVoQixNQUFNLENBQUMsRUFBRUMsTUFBTSwrRUFBK0UsQ0FBQztJQUVsSUYsUUFBUWtCLElBQUksQ0FBQztBQUNmO0FBSUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0amFwcm9qZXh0Ly4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvY2h1bmstV1BTWTNNRkoubWpzPzdiNTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2ludGVybmFsL2luY29tcGF0LW5vZGUtZ3VhcmQudHNcbmZ1bmN0aW9uIGluY29tcGF0aWJsZU5vZGVHdWFyZCgpIHtcbiAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICBpZiAodHlwZW9mIHByb2Nlc3MgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgcmV0dXJuO1xuICBsZXQgbWFqb3I7XG4gIGxldCBtaW5vcjtcbiAgY29uc3QgbWF5YmVOb2RlVmVyc2lvbiA9IChfYiA9IChfYSA9IHByb2Nlc3MudmVyc2lvbnMpID09IG51bGwgPyB2b2lkIDAgOiBfYS5ub2RlKSA9PSBudWxsID8gdm9pZCAwIDogX2Iuc3BsaXQoXCIuXCIpO1xuICBpZiAobWF5YmVOb2RlVmVyc2lvbikge1xuICAgIFttYWpvciwgbWlub3JdID0gbWF5YmVOb2RlVmVyc2lvbi5tYXAoKHYpID0+IHBhcnNlSW50KHYsIDEwKSk7XG4gIH1cbiAgY29uc3QgbWF5YmVOb2RlUGF0aCA9IChfYyA9IHByb2Nlc3MuZW52KSA9PSBudWxsID8gdm9pZCAwIDogX2MuTk9ERTtcbiAgaWYgKCFtYWpvciAmJiBtYXliZU5vZGVQYXRoKSB7XG4gICAgY29uc3Qgbm9kZVZlcnNpb24gPSAoX2QgPSAvdihcXGQrKVxcLihcXGQrKVxcLihcXGQrKS8uZXhlYyhtYXliZU5vZGVQYXRoKSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9kWzBdO1xuICAgIGlmIChub2RlVmVyc2lvbikge1xuICAgICAgW21ham9yLCBtaW5vcl0gPSBub2RlVmVyc2lvbi5zdWJzdHJpbmcoMSkuc3BsaXQoXCIuXCIpLm1hcCgodikgPT4gcGFyc2VJbnQodiwgMTApKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFtYWpvciB8fCAhbWlub3IpXG4gICAgcmV0dXJuO1xuICBpZiAobWFqb3IgPiAxOClcbiAgICByZXR1cm47XG4gIGlmIChtYWpvciA9PT0gMTggJiYgbWlub3IgPj0gMTMpXG4gICAgcmV0dXJuO1xuICBjb25zb2xlLmVycm9yKFxuICAgIGBbVVRdOiBZT1UgQVJFIFVTSU5HIEEgTEVHQUNZICgke21ham9yfS4ke21pbm9yfSkgTk9ERSBWRVJTSU9OIFdISUNIIElTTidUIE9GRklDSUFMTFkgU1VQUE9SVEVELiBQTEVBU0UgVVBHUkFERSBUTyBOT0RFIF4xOC4xMy5gXG4gICk7XG4gIHByb2Nlc3MuZXhpdCgxKTtcbn1cblxuZXhwb3J0IHtcbiAgaW5jb21wYXRpYmxlTm9kZUd1YXJkXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmstV1BTWTNNRkoubWpzLm1hcCJdLCJuYW1lcyI6WyJpbmNvbXBhdGlibGVOb2RlR3VhcmQiLCJfYSIsIl9iIiwiX2MiLCJfZCIsInByb2Nlc3MiLCJtYWpvciIsIm1pbm9yIiwibWF5YmVOb2RlVmVyc2lvbiIsInZlcnNpb25zIiwibm9kZSIsInNwbGl0IiwibWFwIiwidiIsInBhcnNlSW50IiwibWF5YmVOb2RlUGF0aCIsImVudiIsIk5PREUiLCJub2RlVmVyc2lvbiIsImV4ZWMiLCJzdWJzdHJpbmciLCJjb25zb2xlIiwiZXJyb3IiLCJleGl0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/next.mjs":
/*!************************************************!*\
  !*** ./node_modules/uploadthing/dist/next.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNextRouteHandler: () => (/* binding */ createNextRouteHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing)\n/* harmony export */ });\n/* harmony import */ var _chunk_Q54J3NSA_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-Q54J3NSA.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-Q54J3NSA.mjs\");\n/* harmony import */ var _chunk_S3R3VXRK_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-S3R3VXRK.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-S3R3VXRK.mjs\");\n/* harmony import */ var _chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-WPSY3MFJ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\");\n/* harmony import */ var _chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-SHB3FCAQ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-SHB3FCAQ.mjs\");\n/* harmony import */ var _chunk_4PDGVH57_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-4PDGVH57.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-4PDGVH57.mjs\");\n\n\n\n\n\n// src/next.ts\nvar createUploadthing = (opts)=>(0,_chunk_SHB3FCAQ_mjs__WEBPACK_IMPORTED_MODULE_3__.createBuilder)(opts);\nvar createNextRouteHandler = (opts)=>{\n    const handlers = (0,_chunk_Q54J3NSA_mjs__WEBPACK_IMPORTED_MODULE_0__.createServerHandler)(opts);\n    return {\n        POST: (req)=>handlers.POST(req),\n        GET: (req)=>handlers.GET(req)\n    };\n};\n //# sourceMappingURL=next.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9uZXh0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRThCO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFOUIsY0FBYztBQUNkLElBQUlFLG9CQUFvQixDQUFDQyxPQUFTRixrRUFBYUEsQ0FBQ0U7QUFDaEQsSUFBSUMseUJBQXlCLENBQUNEO0lBQzVCLE1BQU1FLFdBQVdMLHdFQUFtQkEsQ0FBQ0c7SUFDckMsT0FBTztRQUNMRyxNQUFNLENBQUNDLE1BQVFGLFNBQVNDLElBQUksQ0FBQ0M7UUFDN0JDLEtBQUssQ0FBQ0QsTUFBUUYsU0FBU0csR0FBRyxDQUFDRDtJQUM3QjtBQUNGO0FBSUUsQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0amFwcm9qZXh0Ly4vbm9kZV9tb2R1bGVzL3VwbG9hZHRoaW5nL2Rpc3QvbmV4dC5tanM/YzU1ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBjcmVhdGVTZXJ2ZXJIYW5kbGVyXG59IGZyb20gXCIuL2NodW5rLVE1NEozTlNBLm1qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay1TM1IzVlhSSy5tanNcIjtcbmltcG9ydCBcIi4vY2h1bmstV1BTWTNNRkoubWpzXCI7XG5pbXBvcnQge1xuICBjcmVhdGVCdWlsZGVyXG59IGZyb20gXCIuL2NodW5rLVNIQjNGQ0FRLm1qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay00UERHVkg1Ny5tanNcIjtcblxuLy8gc3JjL25leHQudHNcbnZhciBjcmVhdGVVcGxvYWR0aGluZyA9IChvcHRzKSA9PiBjcmVhdGVCdWlsZGVyKG9wdHMpO1xudmFyIGNyZWF0ZU5leHRSb3V0ZUhhbmRsZXIgPSAob3B0cykgPT4ge1xuICBjb25zdCBoYW5kbGVycyA9IGNyZWF0ZVNlcnZlckhhbmRsZXIob3B0cyk7XG4gIHJldHVybiB7XG4gICAgUE9TVDogKHJlcSkgPT4gaGFuZGxlcnMuUE9TVChyZXEpLFxuICAgIEdFVDogKHJlcSkgPT4gaGFuZGxlcnMuR0VUKHJlcSlcbiAgfTtcbn07XG5leHBvcnQge1xuICBjcmVhdGVOZXh0Um91dGVIYW5kbGVyLFxuICBjcmVhdGVVcGxvYWR0aGluZ1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5leHQubWpzLm1hcCJdLCJuYW1lcyI6WyJjcmVhdGVTZXJ2ZXJIYW5kbGVyIiwiY3JlYXRlQnVpbGRlciIsImNyZWF0ZVVwbG9hZHRoaW5nIiwib3B0cyIsImNyZWF0ZU5leHRSb3V0ZUhhbmRsZXIiLCJoYW5kbGVycyIsIlBPU1QiLCJyZXEiLCJHRVQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/next.mjs\n");

/***/ })

};
;